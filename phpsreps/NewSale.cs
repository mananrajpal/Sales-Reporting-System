using System;
using System.Collections.Generic;
using System.Text;

namespace phpsreps
{
    /// <summary>
    /// The Sale class controls the creation and insertion of sales and sale_items into the DB.
    /// The saleIDStamp will serves as the unique PrimaryKey, it is based on the date but the actual date of the sale will be
    /// generated by the DB itself.
    /// </summary>

    public class Sale
    {
        public long saleIDStamp; // DB Primary Key.
        public List<NewItemLine> items;
        public float saleTotal = 0f;

        public Sale()
        {
            saleIDStamp = DateTime.Now.Ticks;
            items = new List<NewItemLine>();
        }

        /// <summary>
        /// Adds an item line to the sale.
        /// </summary>
        public void NewItem(string pCode, string qty, string iCost, string total)
        {
            items.Add(new NewItemLine(pCode, qty, iCost, total));
        }

        /// <summary>
        /// Removes an item line from the sale before sale is complete.
        /// </summary>
        /// <param name="productCode">the product code of the item to delete</param>
        public void DeleteItemLine(string productCode)
        {
            items.Remove(items.Find(x => x.ProductCode == productCode));
        }
        
        /// <summary>
        /// Creates a new sale adds it and the item lines to the DB at he conclusion of the sale.
        /// </summary>
        public void InsertSale()
        {

            foreach (NewItemLine i in items)
            {
                saleTotal += i.LineCost;
            }

            string sqlNewSaleString = NewSaleInsertString();
            TsqlNonQuery insertNewSale = new TsqlNonQuery("New Sale Line", sqlNewSaleString);

            foreach (NewItemLine i in items)
            {
                string sqlItemLineString = NewItemInsertString(i);
                TsqlNonQuery insertItemLine = new TsqlNonQuery("New Item Line", sqlItemLineString);
            }
        }

        /// <summary>
        /// Creates a new sale line in the sales table.
        /// </summary>
        /// <returns>SQL Insert string for database with datetime for ID</returns>
        private string NewSaleInsertString()
        {
            StringBuilder saleInsert = new StringBuilder();

            saleInsert.AppendFormat(@"
                -- new sales 
                SET IDENTITY_INSERT dbo.Sales ON
                INSERT INTO dbo.sales (ID, Sale_Date, Sale_Cost)
                VALUES ({0}, CONVERT(VARCHAR(10),GETDATE(),112), {1});
                SET IDENTITY_INSERT dbo.Sales OFF
                ", saleIDStamp.ToString("F0"), saleTotal.ToString("F2")
                );

            return saleInsert.ToString();
        }

        /// <summary>
        /// Creates an insert statement for insterting a sale_items line into the DB.
        /// Multiple of these will be created and registered on the DB at the conclusion of a sale.
        /// </summary>
        /// <param name="line">An item line</param>
        /// <returns></returns>
        private string NewItemInsertString(NewItemLine line)
        {
            StringBuilder itemInsert = new StringBuilder();

            itemInsert.AppendFormat(@"
            -- new item line
            INSERT INTO dbo.sale_items ( Sale_ID, Product_ID, Qty_Sold, Cost_Per_Item, Total_Cost)
            VALUES ({0}, '{1}', {2}, {3}, {4});
            ", saleIDStamp.ToString("F0"), line.ProductCode, line.Qty.ToString("F0"), line.ItemCost.ToString("F2"), line.LineCost.ToString("F2") 
            );

            return itemInsert.ToString();
        }
    }
}

